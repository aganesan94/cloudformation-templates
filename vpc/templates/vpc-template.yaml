---
AWSTemplateFormatVersion: '2010-09-09'
Description: > 
  This Cloudformation Template deploys the network for the application infrastructure.
  Author: Arun Ganesan <aganesan94@gmail.com>

Parameters:
  VPCs:
    Description: Please enter the IP range (CIDR notation) or ID for the BBB VPC
    Type: String
  NumberOfAZs:
    Description: Amount of Availability Zones to utilize
    Type: Number
    AllowedValues:
    - 1
    - 2
    Default: 2
  PublicApplicationSubnets:
    Description:  Comma separated list of the appserver's subnets
    Type: CommaDelimitedList
  PrivateApplicationSubnets:
    Description:  Comma separated list of the private subnets for instances
    Type: CommaDelimitedList
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: dev

Conditions: 
  Build2AZs: !Not [ !Equals [ !Ref NumberOfAZs, 1 ]] 

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCs
      EnableDnsSupport: true
      EnableDnsHostnames: true

  IGW:
    Type: AWS::EC2::InternetGateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicApplicationSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: 
        Fn::Select:
        - '0'
        - Ref: PublicApplicationSubnets    

  PublicApplicationSubnet2:
    Type: AWS::EC2::Subnet
    Condition: Build2AZs
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: 
        Fn::Select:
        - '1'
        - Ref: PublicApplicationSubnets    

  PrivateApplicationSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 
        Fn::Select:
        - '0'
        - Ref: PrivateApplicationSubnets
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateApplicationSubnet2:
    Type: AWS::EC2::Subnet
    Condition: Build2AZs
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 
        Fn::Select:
        - '1'
        - Ref: PrivateApplicationSubnets
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NateGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: IGWAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NateGateway1EIP.AllocationId
      SubnetId: !Ref PublicApplicationSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicApplicationSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicApplicationSubnet1

  PublicApplicationSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Build2AZs
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicApplicationSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateApplicationSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Build2AZs
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateApplicationSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: Build2AZs
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Condition: Build2AZs
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateApplicationSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: Build2AZs
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateApplicationSubnet2

Outputs:
  VPCs:
    Description: A reference to the created VPC
    Value: !Ref VPC

  VPCId:
    Description: VPC ID
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPCID"

  PublicApplicationSubnets:
    Description: A list of the public Application subnets
    Value: !Join [ ",", [ !Ref PublicApplicationSubnet1, !If [ Build2AZs, !Ref PublicApplicationSubnet2,  !Ref "AWS::NoValue"]]]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicApplicationSubnets"

  PrivateApplicationSubnets:
    Description: A list of the private Instance subnets
    Value: !Join [ ",", [ !Ref PrivateApplicationSubnet1, !If [ Build2AZs, !Ref PrivateApplicationSubnet2,  !Ref "AWS::NoValue"]]]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateApplicationSubnets"
